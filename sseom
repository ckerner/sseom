#!/bin/bash
#===============================================================================#
# This script will can be called on all of the nodes in the cluster to execute  #
# a command, but it will only execute on the manager node.                      #
#-------------------------------------------------------------------------------#
# Source: https://github.com/ckerner/sseom.git                                  #
#-------------------------------------------------------------------------------#
# Chad Kerner - ckerner@illinois.edu - chad.kerner@gmail.com                    #
# Senior Storage Engineer, Storage Enabling Technologies                        #
# National Center for Supercomputing Applications                               #
# University of Illinois, Urbana-Champaign                                      #
#===============================================================================#

PROG=`basename $0`


#===============================================================================#
# Function: is_node_gpfs_manager                                                #
#    Usage: Check the current host to see if it is the GPFS manager node.  .    #
#-------------------------------------------------------------------------------#
# Parameter: None                                                               #
# Returns: 0 - If the current host is the GPFS manager node.                    #
#          1 - If the current host is not the GPFS manager node.                #
#===============================================================================#
function is_node_gpfs_manager {
   #HOSTNAME=`hostname -s`
   HOSTNAME=`/usr/lpp/mmfs/bin/mmgetstate -Y | grep -v HEAD | awk -F: '{print($7)}'`
   MANAGER=`/usr/lpp/mmfs/bin/mmlsmgr -c 2>/dev/null| awk '{print($5)}' | sed -e 's/(//g' -e 's/)//g'`

   RESULT=`echo ${MANAGER} | grep ${HOSTNAME} | wc -l`
   if [ ${RESULT} -ge 1 ] ; then
      return 0
   else
      return 1
   fi
}


function is_lock_set {
   LOCKFILE=$1
   if [ -f /var/run/${LOCKFILE} ] ; then
      return 0
   else
      return 1
   fi
}


function set_lock {
   LOCKFILE=$1
   if [ ! -f /var/run/${LOCKFILE} ] ; then
      touch /var/run/${LOCKFILE}
   fi
}

function remove_lock {
   LOCKFILE=$1
   if [ -f /var/run/${LOCKFILE} ] ; then
      rm -f /var/run/${LOCKFILE} &>/dev/null
   fi
}

function gen_lock_name {
   MYCMD="$*"
   #echo ${MYCMD} | md5sum | awk '{print($1)}'
   echo ${MYCMD} | sed -e 's/\//_/g' | awk '{print($1)}'
}

function get_lock_count {
   LOCKFILE=$1
   COUNT=0
   if [ -f /var/run/${LOCKFILE} ] ; then
      COUNT=`wc -l /var/run/${LOCKFILE} | awk '{print($1)}'`
   fi
   echo ${COUNT}
}

function log_to_lockfile {
   LOCKFILE=$1
   shift
   MYMSG="$*"

   echo "${MYMSG}" >> /var/run/${LOCKFILE}
}


if [ "x$1" == "x" ] ; then

   cat <<EOHELP

   Usage: ${PROG} [-v] COMMAND_STRING
          ${PROG} --maint
          ${PROG} --eomaint

   Options
   -v          Execute in verbose mode.
   --maint     Enter maintenance mode
   --eomaint   Leave maintenance mode

EOHELP
   exit 1
fi

# Check to see if we need to run verbose. If so, do it.
if [ "$1" == "-v" ] ; then
   set -x
   shift
fi

MYCMD="$*"
BC=`which bc 2>/dev/null`

if [ "${MYCMD}" == "--maint" ] ; then
   set_lock gpfs_maintenance
   echo "GPFS Maintenance Lock Installed: /var/run/gpfs_maintenance"
   exit 0
elif [ "${MYCMD}" == "--eomaint" ] ; then
   remove_lock gpfs_maintenance
   echo "GPFS Maintenance Lock Removed: /var/run/gpfs_maintenance"
   exit 0
fi

if is_lock_set gpfs_maintenance ; then
   LOCKCNT=`get_lock_count gpfs_maintenance`
   MODCNT=`echo "${LOCKCNT} % 50" | ${BC}`
   if [ ${LOCKCNT} -eq 0 ] ; then
      echo "ERROR: A Maintenance Lock Is In Place."
      log_to_lockfile gpfs_maintenance "ERROR: A Maintenance Lock Is In Place."
   elif [ ${MODCNT} -eq 0 ] ; then
      echo "ERROR: A Maintenance Lock Is In Place."
      log_to_lockfile gpfs_maintenance "ERROR: A Maintenance Lock Is In Place."
   else
      log_to_lockfile gpfs_maintenance "ERROR: A Maintenance Lock Is In Place."
   fi
   exit 1
fi

LOCK=$(gen_lock_name ${MYCMD})

if is_node_gpfs_manager ; then
   if is_lock_set ${LOCK} ; then
      echo "Command: ${MYCMD} already has a lock: /var/run/${LOCK}"
      exit 100
   fi

   set_lock ${LOCK}

   #echo `date`"  Executing: ${MYCMD}"
   eval ${MYCMD}
   RC=$?

   remove_lock ${LOCK}

   exit ${RC}   
else
   exit 2
fi

