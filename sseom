#!/bin/bash
#===============================================================================#
# This script will can be called on all of the nodes in the cluster to execute  #
# a command, but it will only execute on the manager node.                      #
#-------------------------------------------------------------------------------#
# Source: https://github.com/ckerner/gpfs-shell-functions.git                   #
#-------------------------------------------------------------------------------#
# Chad Kerner - ckerner@illinois.edu - chad.kerner@gmail.com                    #
# Senior Storage Engineer, Storage Enabling Technologies                        #
# National Center for Supercomputing Applications                               #
# University of Illinois, Urbana-Champaign                                      #
#===============================================================================#

PROG=`basename $0`
if [ "x$1" == "x" ] ; then

   cat <<EOHELP

   Usage: ${PROG} [-v] COMMAND_STRING
          ${PROG} --maint
          ${PROG} --eomaint

   Options
   -v          Execute in verbose mode.
   --maint     Enter maintenance mode
   --eomaint   Leave maintenance mode

EOHELP
   exit 1
fi

# Check to see if we need to run verbose. If so, do it.
if [ "$1" == "-v" ] ; then
   set -x
   shift
fi

MYCMD="$*"
BC=`which bc 2>/dev/null`

# Are the helper functions installed.
if [[ -e /var/mmfs/etc/gpfs_functions ]] ; then
   source /var/mmfs/etc/gpfs_functions
else
   echo "/var/mmfs/etc/gpfs_functions not installed."
   exit 1
fi

if [ "${MYCMD}" == "--maint" ] ; then
   set_lock gpfs_maintenance
   echo "GPFS Maintenance Lock Installed: /var/run/gpfs_maintenance"
   exit 0
elif [ "${MYCMD}" == "--eomaint" ] ; then
   remove_lock gpfs_maintenance
   echo "GPFS Maintenance Lock Removed: /var/run/gpfs_maintenance"
   exit 0
fi

if is_lock_set gpfs_maintenance ; then
   LOCKCNT=`get_lock_count gpfs_maintenance`
   MODCNT=`echo "${LOCKCNT} % 50" | ${BC}`
   if [ ${LOCKCNT} -eq 0 ] ; then
      echo "ERROR: A Maintenance Lock Is In Place."
      log_to_lockfile gpfs_maintenance "ERROR: A Maintenance Lock Is In Place."
   elif [ ${MODCNT} -eq 0 ] ; then
      echo "ERROR: A Maintenance Lock Is In Place."
      log_to_lockfile gpfs_maintenance "ERROR: A Maintenance Lock Is In Place."
   else
      log_to_lockfile gpfs_maintenance "ERROR: A Maintenance Lock Is In Place."
   fi
   exit 1
fi

LOCK=$(gen_lock_name ${MYCMD})

if is_node_gpfs_manager ; then
   if is_lock_set ${LOCK} ; then
      echo "Command: ${MYCMD} already has a lock: /var/run/${LOCK}"
      exit 100
   fi

   set_lock ${LOCK}

   #echo `date`"  Executing: ${MYCMD}"
   eval ${MYCMD}
   RC=$?

   remove_lock ${LOCK}

   exit ${RC}   
else
   exit 2
fi

